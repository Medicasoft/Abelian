#!/usr/bin/env python
import argparse, urllib2, sys, os, subprocess, anchorlib

CADIR = '/var/spool/direct/ca/trust'
TEMPDIR = '/var/spool/direct/tmp'

parser = argparse.ArgumentParser(description = 'Import trust bundle')
parser.add_argument('cmd', choices = ['add', 'remove'])
parser.add_argument('-d', '--domain', required = True)
parser.add_argument('-f', '--file')
parser.add_argument('-u', '--url')

parms = parser.parse_args()
store = os.path.join(CADIR, parms.domain.lower())

if not os.path.isdir(store):
    os.mkdir(store, 0770)

bundle = None
if parms.file != None:
    bundle = open(parms.file, 'rb')
elif parms.url != None:
    try:
        bundle = urllib2.urlopen(parms.url)
    except IOError as ioe:
        print ioe
        exit(1)

    rescode = bundle.getcode()
    if rescode != 200:
        print 'Unable to download bundle. Return code was: %s' % rescode
        exit(1)
else:
    bundle = sys.stdin

certs_file = os.path.join(TEMPDIR, '%d.pem' % os.getpid())

try:
    start = bundle.read(10)
    inform = 'pkcs7' if start == '-----BEGIN' else 'der'

    ssl = subprocess.Popen(['openssl', 'cms', '-cmsout', '-noout', '-inform', inform, '-certsout', certs_file], stdin = subprocess.PIPE)
    ssl.stdin.write(start)
    ssl.stdin.write(bundle.read())
    ssl.communicate()
    if ssl.returncode != 0:
        exit(ssl.returncode)

    with open(certs_file, 'r') as fp:
        cert = ''
        for line in fp:
            if line == '-----BEGIN CERTIFICATE-----\n':
                cert = line
            elif line == '-----END CERTIFICATE-----\n':
                cert += line
                if parms.cmd == 'add':
                    anchorlib.add_anchor(cert, store, False)
                elif parms.cmd == 'remove':
                    anchorlib.remove_anchor(cert, store, False)
            else:
                cert += line

    exit(anchorlib.rehash_store(store))
finally:
    if os.path.isfile(certs_file):
        os.remove(certs_file)