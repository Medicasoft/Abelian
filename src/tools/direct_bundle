#!/usr/bin/env python
import sys, os, glob #, psycopg2
from subprocess import Popen
import M2Crypto as crypto

CADIR = '/var/spool/direct/ca/'

def add_anchor(anchor):
    cert = crypto.X509.load_cert_string(anchor)
    subject_hash = hex(cert.get_subject().as_hash())[2:-1]
    fingerprint = cert.get_fingerprint()
    #fname = '%s.0' % subject_hash
    ext = -1
    for fname in glob.glob(os.path.join(CADIR, '%s.?.pem' % subject_hash)):
        print fname
        if fingerprint == crypto.X509.load_cert(fname).get_fingerprint():
            return
        print fname, fname.split('.')[2]
        ext = max(ext, int(fname.split('.')[1]))

    print '%s.%d' % (subject_hash, ext+1), cert.get_subject()
    with open(os.path.join(CADIR, '%s.%d.pem' % (subject_hash, ext+1)), 'w') as cert_file:
        cert_file.write(anchor)
    return

domain = sys.argv[1]
bundle = sys.argv[2]

certs_file = '%d.pem' % os.getpid()

with open(bundle, 'rb') as fp:
    start = fp.read(10)
    inform = 'pkcs7' if start == '-----BEGIN' else 'der'
    print inform
    fp.close()
    ssl = Popen(['openssl', 'cms', '-cmsout', '-noout', '-in', bundle, '-inform', inform, '-certsout', certs_file])
    ssl.communicate()
    if ssl.returncode != 0:
        exit(ssl.returncode)

with open(certs_file, 'r') as fp:
    cert = ''
    for line in fp:
        if line == '-----BEGIN CERTIFICATE-----\n':
            cert = line
        elif line == '-----END CERTIFICATE-----\n':
            cert += line
            add_anchor(cert)
        else:
            cert += line

rehash = Popen(['c_rehash', CADIR + domain])
rehash.communicate()
exit(rehash.returncode)